一.文件I/O

1."不带缓冲"指的是每个read和write都调用内核中的一个系统调用，所有的磁盘I/O都要经过\
		内核的块缓冲区（也称为内核的缓冲区高速缓存），唯一例外的是对原始磁盘\
		设备的I/O，但是一般不考虑。

2.如果文件是用O_SYNC标志打开，那么对该文件的每一次write操作都将在write返回前更新文件时间，\
		这与是否改写现有字节或增写文件无关。Linux2.4.22将O_DSYNC和O_RSYNC处理成与O_SYNC相同。

3.在程序中创建一个按读写方式打开的临时文件时可以使用以下语句：open( pathname, O_RDWR | O_CREAT | O_TRUNC, mode );

4.比较lseek的返回值时，由于某些设备允许其返回的偏移量为负值，所以要测试他是否等于-1,而不是是否小于0.

5.read函数返回0时可能的情况：1）读取到文件末尾;
			     2）未开始读取就因某一信号造成终中断（系统调用造成读取中断）。

6.write出错的常见原因是：磁盘已写满或者超过了一个给定进程的文件长度限制。

7.内核使用三种数据结构表示打开的文件：1）进程表项：包含文件描述符标志和指向一个文件表项的指针;
				      2）文件表项：包含文件状态标志、当前文件偏移量和v节点指针。
				      3）v结点表：包含v节点信息、i节点信息和当前文件长度。

8.Linux没有将相关数据结构分为v结点和i结点，而是采用一个独立于文件系统的i结点和一个依赖于文件系统的i结点。

9.每个进程都有自己的文件表项使得每个进程都有它自己对某文件的当前偏移量。

10.函数pread和函数pwrite相当于把lseek和read与lseek和write分别合并为原子操作，从而使得调用时\
		无法中断其定位和读操作，也不更新文件指针。

11.每次调用open函数就分配一个新的文件表项，write函数在写数据之前会自动将文件偏移量设置为文件尾。

12.在对文件进行读写操作时，将缓冲区大小设为文件系统的块长可以提高I/O效率。
